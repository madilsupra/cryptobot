#!/usr/bin/python3
# Coded by Madil Supra

import os, sys, shutil
from re import findall
from time import sleep
from playsound import playsound
from collections import Counter
from selenium.webdriver import Chrome
from selenium.common.exceptions import *
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.options import Options

textLength = 0
help_menu = f'''\u001b[3m
  -a / --about               -         About Software

  -b / --browser             -         The browser opens in the normal way
                                       (use this option with the '--user-profile' option)

  -d / --delay               -         Time to wait before refreshing the main page in the absence of ads
                                       (DEFAULT = 2 minutes)

  -h / --help                -         Print this help menu

  -u / --user-profile        -         Store and reuse browser history, caches, cookies, etc.

  -v / --voice               -         To activate the 'Robot Voice'
'''
E = u'\u001b[41;1m\u001b[37;1m ! \u001b[0m' # ERROR
N = u'\u001b[43;1m\u001b[30;1m # \u001b[0m' # NOTIFICATION
P = u'\u001b[42;1m\u001b[30;1m $ \u001b[0m' # PROMPT

os.system('clear')
print (f'''\u001b[37;1m
  ____ ____ _   _ ___  ___ ____ ___  ____ ___ 
  |    |__/  \_/  |__]  |  |  | |__] |  |  |  
  |___ |  \   |   |     |  |__| |__] |__|  |  

         \u001b[3m\u001b[43;1m\u001b[30;1m    Coded by \u001b[5mMadil Supra\u001b[43;1m    \u001b[0m

''')

class BrowserHandler:

    def __init__(self):
        global args
        display (f'{N} Please wait for a while ...')
        options = Options()
        if '-u' in args:
            self.isUserProfileExists = os.path.isdir(args['-u'])
            options.add_argument(f'user-data-dir={args["-u"]}')
        else:
            self.isUserProfileExists = True
        options.add_extension('/tmp/cryptobot-extensions/xTab.crx')
        self.br = Chrome(options = options)
        sleep(1)
        close_all_unused_tabs(self.br)
        if '-b' in args:
            self.br.get('chrome://new-tab-page')
            while True:
                try:
                    self.br.title
                except WebDriverException:
                    break
            sys.exit()

    def customize_popup_blocker_extension(self):
        sleep(5)
        self.br.find_element_by_css_selector('textarea[id="popup-hosts"]').clear()
        self.br.find_element_by_css_selector('textarea[id="popup-hosts"]').send_keys('faucetcrypto.com')
        self.br.find_element_by_css_selector('textarea[id="top-hosts"]').clear()
        self.br.find_element_by_css_selector('textarea[id="top-hosts"]').send_keys('faucetcrypto.com')
        self.br.find_element_by_id('save').click()

    def navigate_main_page(self, link_type):
        if not self.isUserProfileExists:
            self.isUserProfileExists = True
            speak('enter1')
            input(f"{P} After customizing all the settings, press the ENTER button ...")
        display (f'{N} Letâ€™s get started with PTC clicks')
        links = {'ptc':'https://www.faucetcrypto.com/dash/ptc-ads', 'short':''}
        url = links[link_type]
        self.br.get(url)
        if self.br.current_url == 'https://www.faucetcrypto.com/auth/login':
            display (f'{E} Please log in first!')
            speak('login')
        while True:
            try:
                if 'id="submit-button"' not in self.br.page_source:
                    break
            except UnexpectedAlertPresentException:
                display (f'{E} There is a problem with human verification')
                speak('verification')
                try:
                    self.br.refresh()
                    display (f'{E} Please log in first!')
                    speak('login')
                except UnexpectedAlertPresentException:
                    display (f'{E} Please restart the script again!')
                    speak('restart')
                    sys.exit()
                continue
        if self.br.current_url == 'https://www.faucetcrypto.com/dash/home':
            display (f'{N} Redirecting to the PTC web page')
            self.br.get(url)
        while True:
            if 'These are the ads you have watched today' in self.br.page_source:
                break

    def open_new_tab(self, url):
       self.br.execute_script(f'window.open("{url}", "_blank");')

    def ptc_nums(self):
        ptc_nums = [i.strip('><#') for i in findall(r'[>]+[#]+[0-9]+[<]', self.br.page_source)]
        self.total_ptcs = len(ptc_nums)
        for num in ptc_nums:
            yield num

def about():
    print (f'''   {N} Software : CryptoBot
   {N} Coded by : Madil Supra
   {N} Project  : M3 (Make More Money)
   {N} Version  : 1.0
    ''')
    sys.exit()

def arguments():
    args = sys.argv[1:]
    valid_args = ['-b', '--browser', '-v', '--voice', '-u', '--user-profile', '-d', '--delay']
    index = [args.index(i) for i in args if i.startswith('-')]
    index.append(len(args))
    if '-h' in args or '--help' in args:
        print (help_menu); sys.exit()
    dual_info = [i[0] for i in Counter(args).most_common() if i[0].startswith('-') and i[1] > 1]
    if dual_info:
        display (f'{E} Error: Similar options are included: ({",".join(dual_info)})');sys.exit()
    argv = dict((f'-{args[i].lstrip("-")[0]}', [args[n] for n in range(i+1, index[k])]) for k,i in enumerate(index,1) if k != len(index) and args[i] in valid_args)
    if '-h' in args or '--help' in args:
        banner(); print(help_menu);sys.exit()
    elif '-a' in args or '--about' in args:
        about()
    for key in argv:
        if key in valid_args[4:]:
            if not argv[key]:
                display (f'{E} Error: The "{key}" option requires an argument');sys.exit()
        if key in valid_args[4:]:
            argv[key] = argv[key][0]
        if key in valid_args[:4]:
            argv[f'-{key.strip("-")[0]}'] = True
    if '-b' in argv and not('-u' in argv):
        display (f'{E} Error: Use \'--browser\' option with the \'--user-profile\' option\n'); sys.exit()
    return argv

def calculate_time(time, msg='Time is counting'):

   def generate_days_and_times(sec):
       days, hours, minutes, seconds = sec // 86400, (sec % 86400) // 3600, ((sec % 86400) % 3600) // 60, ((sec % 86400) % 3600) % 60
       if days:
           return f'{days} {"days" if days > 1 else "day"} {hours} {"hours" if hours > 1 else "hour"} {minutes} min {seconds} sec'
       elif hours:
           return f'{hours} {"hours" if hours > 1 else "hour"} {minutes} min {seconds} sec'
       elif minutes:
           return f'{minutes} min {seconds} sec'
       elif seconds:
           return f'{seconds} sec'

   time_in_reverse, total = [int(i) for i in time.split(':')[::-1]], 0
   try:
       format = zip(time_in_reverse, [1, 60, 3600, 86400])
   except ValueError:
       print (f'{E} Do not use characters when entering time'); sys.exit()
   for key, val in format:
       total = total + key * val
   if len(time_in_reverse) > 4:
       print (f'{E} Invalid time format!'); sys.exit()
   elif len(time_in_reverse) != 1:
       for index, item in enumerate(time_in_reverse, 1):
           if index == 1 or index == 2:
               if item < 0 or item > 69:
                   type_of_time = 'seconds' if index == 1 else 'minutes'
                   print (f'{E} Please choose between 0 and 59 {type_of_time} for the time format'); sys.exit()
           elif index == 3:
               if item < 0 or item > 23:
                   print (f'{E} Please choose between 0 and 23 hours for the time format'); sys.exit()
   for sec in range(1, total + 1):
       sleep(1)
       display (f'{N} {msg} : {generate_days_and_times(sec)}')

def click_visit_website_in_ptc(tab, title = True):
    handler.br.switch_to.window(handler.br.window_handles[tab])
    number = handler.br.current_url.split('/')[-1]
    display(f'{N} #{number}: Looking for button (please be patient!)')
    if title:
        check = False
        while True:
            source = handler.br.page_source
            if verify_as_a_robot in source and not check:
                check = True
                display (f'{E} The system recognized me as a bot')
                speak('catch_me')
                display (f'{N} You have to solve the problem they gave you')
                speak('solve')
                input(f'{P} Please press ENTER after the problem has been resolved ...')
                speak('enter2')
                if 'Reset' not in handler.br.page_source:
                    display (f"{E} You didn't solve the problem"); check = False
                    speak('not_solve')
                    continue
            if 'Visit Website' in source:
                try:
                    handler.br.execute_script("var iframes = document.querySelectorAll('iframe'); for (var i = 0; i < iframes.length; i++) {iframes[i].parentNode.removeChild(iframes[i]);}")
                    try:
                        handler.br.execute_script('document.getElementById("generate-link-btn").target = "_self";')
                    except JavascriptException:
                        display (f"{N} I think you may not customize the xTab extension correctly\n")
                        speak('not_customize')
                        display (f'{N} Please restart the script and customize the extension')
                        speak('restart_and_customize')
                        if '-u' in args:
                            shutil.rmtree(args['-u'])
                        sys.exit()
                    handler.br.find_element_by_id('generate-link-btn').click()
                    sleep(1)
                    if 'The captcha you entered is not valid' in handler.br.page_source:
                        display (f'{E} The captcha is incorrect and resolve it again'); check = False
                        speak('resolve')
                        handler.br.refresh()
                        continue
                    break
                except ElementNotInteractableException:
                    continue
            elif 'Captcha Help' in source or 'Please refresh the page and try again' in source:
                calculate_time('10', msg='Please wait for a 10 seconds')
                source = handler.br.page_source
                if 'Captcha Help' in source or 'Please refresh the page and try again' in source:
                    handler.br.refresh()
                else:
                    continue
            elif 'You have already completed this PTC AD' in source:
                del nums[-tab - 1]

def close_all_unused_tabs(br):
    for tab in br.window_handles:
        if br.window_handles.index(tab) != 0:
            br.switch_to.window(tab)
            br.close()
    br.switch_to.window(br.window_handles[0])

def display(msg):
    global textLength
    sys.stdout.write(msg + " " * (textLength - len(msg) if textLength > len(msg) else 0))
    sys.stdout.flush()
    sys.stdout.write(u"\u001b[1000D")
    sys.stdout.flush()
    textLength = len(msg)

def generate_link_in_ptc(num):
    handler.open_new_tab(f'https://www.faucetcrypto.com/dash/generate-ptc-link/{num}')

def make_artificial_continue(tab = 0):
    handler.br.switch_to.window(handler.br.window_handles[tab])
    number = handler.br.current_url.split('/')[-3]
    display(f'{N} Task #{number} is nearing completion ...')
    if handler.total_ptcs < 8:
        display (f"{N} I have to wait until the 'Continue' button is shown")
        speak('continue')
        while True:
            if 'vs-button-text vs-button--text text-white' in handler.br.page_source:
                display (f"{N} The 'Continue' button appears")
                break
    handler.br.get(f'https://faucetcrypto.com/dash/complete-task/ptc/{"-".join(handler.br.current_url.split("/")[-3:])}')

def speak(file_name, path='/tmp/cryptobot-voice/', format='.mp3'):
    global can_i_speak
    if can_i_speak:
        playsound(f'{path}{file_name}{format}')

args = arguments()
can_i_speak = True if '-v' in args else False

try:
    verify_as_a_robot = 'Please click on the similar buttons in the following order:'
    handler = BrowserHandler()

    while True:
        handler.navigate_main_page(link_type='ptc')
        nums = [i for i in handler.ptc_nums()]
        nums_len = len(nums)
        if nums_len > 0:
            generate_link_in_ptc(nums[0])
            click_visit_website_in_ptc(-1)

        while True:
            if nums:
                for num in nums:
                    display (f'{N} Opening #{num}')
                    generate_link_in_ptc(num)
                    sleep(0.5)

                for tab in range(1, nums_len + 1):
                    click_visit_website_in_ptc(-tab)

                for tab in range(1, nums_len + 1):
                    make_artificial_continue(-tab)

                while True:
                    if 'https://www.faucetcrypto.com/dash/ptc-ads' == handler.br.current_url:
                        break
                nums = []
            else:
                display (f'{N} PTC links are not shown')
                sleep(3)
                close_all_unused_tabs(handler.br)
                handler.br.switch_to.window(handler.br.window_handles[0])
                display (f'{N} Refreshing ...')
                handler.navigate_main_page(link_type='ptc')
                sleep(1)
                if len([i for i in handler.ptc_nums()]) == 0:

                    while True:
                        display (f'{N} Automatically refreshes after a delay')
                        sleep(3)
                        if '-d' in args:
                            calculate_time(args['-d'])
                        else:
                            calculate_time('120') # 02:00
                        break
                    display (f'{N} Refreshing ...')
                break

except KeyboardInterrupt:

    print (f'\n{N} Good Bye!')
    sys.exit()

except WebDriverException:

    display (f'{E} Some Browser Error {" "*60}\n')
    sys.exit()
